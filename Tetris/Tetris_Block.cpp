
/*------------------*/
/* インクルード		*/
/*------------------*/
#include "Tetris_Block.h"

/*------------------*/
/* メンバ関数		*/
/*------------------*/

/*----------------------------------------------------------*/
/*															*/
/*	[関数]	CTetris_Block	:	引数なしコンストラクタ		*/
/*															*/
/*----------------------------------------------------------*/
CTetris_Block::CTetris_Block()
{
	m_Color			= BlockNS::BLACK;
	m_BlockState	= BlockNS::EMPTY;
}

/*----------------------------------------------------------*/
/*															*/
/*	[関数]	CTetris_Block()	:	引数ありコンストラクタ		*/
/*	---------------------------------------------------		*/
/*	[戻り値]	void		:	なし						*/
/*	[引数]		int			:	石のX座標					*/
/*				int			:	石のY座標					*/
/*				Stone_Color	:	石の状態					*/
/*															*/
/*----------------------------------------------------------*/
CTetris_Block::CTetris_Block( short color, unsigned short state)
{
	m_Color = color;
	m_BlockState = state;
}

/*----------------------------------------------------------*/
/*															*/
/*	[関数]	Tetris_Block	:	引数なしコンストラクタ		*/
/*															*/
/*----------------------------------------------------------*/
CTetris_Block::~CTetris_Block()
{
}

/*------------------------------------------------------------------*/
/*																	*/
/*	[関数]		GeBlocktColor			:	ブロックカラーを取得	*/
/*	-------------------------------------------------------------	*/
/*	[戻り値]	const unsigned short&&	:	ブロックカラーの状態	*/
/*	[引数]									なし					*/
/*																	*/
/*------------------------------------------------------------------*/
unsigned short CTetris_Block::GetBlockColor() const
{
	return m_Color;
}

/*------------------------------------------------------------------*/
/*																	*/
/*	[関数]		SetBlockColor			:	ブロックカラーを設定	*/
/*	-------------------------------------------------------------	*/
/*	[戻り値]	unsigned short&			:	ブロックカラー状態		*/
/*	[引数]									なし					*/
/*																	*/
/*------------------------------------------------------------------*/
unsigned short& CTetris_Block::SetBlockColor()
{
	return m_Color;
}

/*------------------------------------------------------------------------------*/
/*																				*/
/*	[関数]		GetBlock				:	ブロックがあるかどうかを取得		*/
/*	---------------------------------------------------------------------------	*/
/*	[戻り値]	const unsigned short&	:	ブロックの状態						*/
/*	[引数]									なし								*/
/*																				*/
/*------------------------------------------------------------------------------*/
unsigned short CTetris_Block::GetBlockState() const
{
	return m_BlockState;
}

/*------------------------------------------------------------------------------*/
/*																				*/
/*	[関数]		SetBlock				:	ブロックの状態を設定				*/
/*	---------------------------------------------------------------------------	*/
/*	[戻り値]	const unsigned short&	:	ブロックの状態						*/
/*	[引数]									なし								*/
/*																				*/
/*------------------------------------------------------------------------------*/
unsigned short& CTetris_Block::SetBlockState()
{
	return m_BlockState;
}

